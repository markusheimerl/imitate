name: Train Transformer
on:
  workflow_dispatch:
    inputs:
      training_steps:
        description: 'Number of training steps'
        required: true
        default: '10000'
        type: string
      iteration:
        description: 'Current iteration number'
        required: true
        default: '1'
        type: string

permissions:
  contents: write

jobs:
  train:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Setup
      run: |
        sudo apt-get update && sudo apt-get install -y libomp-dev
        python -m pip install --upgrade pip matplotlib pandas

    - name: Update Training Steps
      run: |
        sed -i "s/#define TRAINING_STEPS [0-9]*/#define TRAINING_STEPS ${{ github.event.inputs.training_steps }}/" train.c

    - name: Download Previous Weights
      if: github.event.inputs.iteration != '1'
      continue-on-error: true
      run: |
        # Get the latest release
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
        # Find the weights file URL
        WEIGHTS_URL=$(echo "$LATEST_RELEASE" | grep -o '"browser_download_url": ".*weights\.bin"' | cut -d'"' -f4)
        if [ ! -z "$WEIGHTS_URL" ]; then
          curl -L -o previous_weights.bin "$WEIGHTS_URL"
          echo "Downloaded previous weights"
        fi

    - name: Train
      run: |
        if [ -f "previous_weights.bin" ]; then
          make clean
          make
          cd sim && make log && ./sim.out 1000 && cp *_control_data.csv .. && make clean && cd ..
          ./train.out $(ls -t *_control_data.csv | head -1) previous_weights.bin
        else
          make run
        fi

    - name: Set Release Tag
      id: tag
      run: |
        echo "RELEASE_TAG=iteration-${{ github.event.inputs.iteration }}-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
        echo "TIMESTAMP=$(date +%Y-%m-%d_%H:%M:%S)" >> $GITHUB_ENV

    - name: Create Release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: "Iteration ${{ github.event.inputs.iteration }} - ${{ env.TIMESTAMP }}"
        body: |
          Training Results
          - Time: ${{ env.TIMESTAMP }}
          - Commit: ${{ github.sha }}
          - Training Steps: ${{ github.event.inputs.training_steps }}
          - Iteration: ${{ github.event.inputs.iteration }}

    - name: Upload Assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        UPLOAD_URL=$(echo "${{ steps.release.outputs.upload_url }}" | cut -d'{' -f1)
        for f in *_weights.bin *_control_data.csv *_loss.png *_flight.gif; do
          [ -f "$f" ] && curl -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Content-Type: $(file -b --mime-type $f)" \
            -H "Accept: application/vnd.github.v3+json" \
            --data-binary "@$f" \
            "${UPLOAD_URL}?name=$f" \
            && echo "Uploaded $f" || echo "Failed: $f"
        done

    - name: Trigger Next Iteration
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        NEXT_ITERATION=$(({{ github.event.inputs.iteration }} + 1))
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/train_transformer.yaml/dispatches \
          -d "{\"ref\":\"${{ github.ref }}\",\"inputs\":{\"training_steps\":\"${{ github.event.inputs.training_steps }}\",\"iteration\":\"$NEXT_ITERATION\"}}"