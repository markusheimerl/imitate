name: Train Transformer
on:
  workflow_dispatch:
permissions:
  contents: write

jobs:
  train:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Setup environment
      run: |
        sudo apt-get update && sudo apt-get install -y libomp-dev
        python -m pip install --upgrade pip matplotlib pandas

    - name: Train and evaluate
      run: |
        make all
        make run
        WEIGHTS_FILE=$(ls *_weights.bin)
        ./fly.out $WEIGHTS_FILE || echo "Flight simulation failed but continuing"
        echo "WEIGHTS_FILE=$WEIGHTS_FILE" >> $GITHUB_ENV
        echo "CSV_FILE=$(ls *_control_data.csv)" >> $GITHUB_ENV
        echo "TIMESTAMP=$(date '+%Y-%m-%d_%H-%M')" >> $GITHUB_ENV

    - name: Plot training loss
      run: |
        python -c '
        import matplotlib.pyplot as plt, pandas as pd, os
        f = sorted([f for f in os.listdir(".") if f.endswith("_loss.csv")])[-1]
        ts = f.replace("_loss.csv", "")
        df = pd.read_csv(f, names=["step", "loss"])
        plt.figure(figsize=(10, 6))
        plt.plot(df["step"], df["loss"], "b", alpha=0.5, label="Raw")
        plt.plot(df["step"], df["loss"].rolling(10, center=True).mean(), "r", lw=2, label="Average")
        plt.title("Training Loss"), plt.xlabel("Step"), plt.ylabel("Loss")
        plt.yscale("log"), plt.grid(True), plt.legend()
        plt.savefig(f"{ts}_loss.png")
        '

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-${{ env.TIMESTAMP }}
        release_name: Training Results ${{ env.TIMESTAMP }}
        body: |
          Transformer Training Results
          - Training completed: ${{ env.TIMESTAMP }}
          - Commit: ${{ github.sha }}
          - Contains: Trained weights, loss visualization, flight animation, simulation data

    - name: Upload Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for ASSET in "${{ env.WEIGHTS_FILE }}" "${{ env.CSV_FILE }}" "training_loss.png" "transformer_flight.gif"; do
          if [ -f "$ASSET" ]; then
            echo "Uploading $ASSET..."
            MIME_TYPE=$(file -b --mime-type "$ASSET")
            UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
            UPLOAD_URL="${UPLOAD_URL%\{*}"  # Remove the {?name,label} suffix
            
            curl \
              --fail \
              -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: $MIME_TYPE" \
              -H "Accept: application/vnd.github.v3+json" \
              --data-binary "@$ASSET" \
              "${UPLOAD_URL}?name=$(basename "$ASSET")"
            
            if [ $? -eq 0 ]; then
              echo "Successfully uploaded $ASSET"
            else
              echo "Failed to upload $ASSET"
            fi
          else
            echo "Warning: $ASSET not found"
          fi
        done